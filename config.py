import os
import logging
import sys

# --- Application Configuration ---
# Basic metadata about the application.
APP_NAME = "OpenClip Pro"
APP_VERSION = "1.1"
# The absolute path to the directory containing this configuration file.
# This assumes the config file is placed appropriately within the project structure.
try:
    APP_DIR = os.path.dirname(os.path.abspath(__file__))
    PROJECT_ROOT = os.path.dirname(APP_DIR)  # Parent directory of APP_DIR
except NameError:
    # Handle cases where __file__ might not be defined (e.g., interactive session)
    APP_DIR = os.getcwd()
    PROJECT_ROOT = os.path.dirname(APP_DIR)
    logging.warning("__file__ not defined, using current working directory as APP_DIR.")


# --- Data and Configuration Paths ---
# Use a hidden directory in the user's home for persistent data and configuration.
# This is a common practice for user-specific application data on Linux/macOS.
CONFIG_DATA_BASE_DIR = os.path.join(os.path.expanduser("~"), ".openclip")

# Path to the main application database file.
DB_FILE = os.path.join(CONFIG_DATA_BASE_DIR, "openclip.db")

# Path to the file storing sensitive API keys. Using the one in project root.
API_KEY_FILE = os.path.join(PROJECT_ROOT, "api_keys.json")

# Use a separate hidden directory for temporary files generated by the application.
TEMP_BASE_DIR = os.path.join(os.path.expanduser("~"), ".openclip_temp")

DEFAULT_TEMP_DIR = "tmp/"  # or any path you're using



# --- Logging Configuration ---
# Dictionary defining the basic logging setup.
# This can be loaded using logging.config.dictConfig elsewhere in the application.
LOGGING_CONFIG = {
    "level": logging.INFO,  # Default logging level (e.g., INFO, DEBUG, WARNING).
    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "datefmt": "%Y-%m-%d %H:%M:%S",
}


# --- AI Service Configuration ---
# Default timeout in seconds for external AI API requests.
DEFAULT_API_TIMEOUT = 120  # seconds


# --- Initialization ---
# Ensure necessary application directories exist when this module is imported.
# This prevents errors later if the application tries to write to these locations.
try:
    # Create the main configuration and data directory.
    # exist_ok=True prevents an error if the directory already exists.
    os.makedirs(CONFIG_DATA_BASE_DIR, exist_ok=True)

    # Create the base directory for temporary files.
    os.makedirs(TEMP_BASE_DIR, exist_ok=True)

except OSError as e:
    # Log an error if directories cannot be created.
    # This might indicate a permissions issue or other filesystem problem.
    # Use basicConfig as a fallback if logging isn't configured yet.
    logging.basicConfig(level=logging.ERROR)
    logging.error(f"Failed to create necessary application directories: {e}")
    # Depending on the application's needs, you might want to exit here
    # if these directories are absolutely essential for operation.
    # sys.exit(f"Error: Could not create required directories. Exiting. {e}")

